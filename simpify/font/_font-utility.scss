@use 'sass:math';
@use '../breakpoints/breakpoints-variables' as *;

// Font families
$font-families: (
  'primary': 'Roboto, sans-serif',
  'secondary': 'Merriweather, serif',
  'monospace': 'Courier New, monospace'
);

// Font sizes (in px)
$font-sizes: (
  10: 10px,
  12: 12px,
  14: 14px,
  16: 16px,
  18: 18px,
  20: 20px,
  24: 24px,
  32: 32px,
  48: 48px,
  64: 64px,
);

// Convert px to rem
@function rem($size) {
  @return math.div($size, 16) + rem;
}

// Base font mixin
@mixin font-base($font: 'primary', $size: 16px, $color: null) {
  font-family: map.get($font-families, $font);
  font-size: rem($size);
  @if $color != null {
    color: $color;
  }
}

// Generate font family utilities
@each $name, $family in $font-families {
  .font-#{$name} {
    font-family: $family !important;
  }
}

// Generate combined font utilities (font-family + font-size)
@each $name, $family in $font-families {
  @each $size, $value in $font-sizes {
    .font-#{$name}-#{$size}x {
      font-family: $family !important;
      font-size: rem($value) !important;
    }
  }
}

// Generate standalone font size utilities
@each $size, $value in $font-sizes {
  .fs-#{$size}x {
    font-size: rem($value) !important;
  }
}

// Responsive font size utilities
$breakpoints: (
  'sm': $sm,
  'md': $md,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl
);

@each $breakpoint, $bp-min in $breakpoints {
  @media (min-width: $bp-min) {
    @each $size, $value in $font-sizes {
      .fs-#{$breakpoint}-#{$size}x {
        font-size: rem($value) !important;
      }
    }
  }
}